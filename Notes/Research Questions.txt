Q1: What is the upper limit for the number of heights for a given permutation and it's root ladder?
Q2: What is the gray code for generating the root ladder lotter for the permutations
Q3: How many ladder lotteries are there for a given number of inversions? If two permutations have the same number
of inversions do they have the same number of ladder lotteries? 


SVG for the graphics.


The number of ladders for a given permutation is equal to the number of times each bar is swapped + 1.
A bar is swapped iff a bar is the bottom bar of a degenerative triadic sub-pattern. The number of times the 
bar is swapped is still unknown. A bar is part of at least 1 degenerative triadic sub-pattern if said bar represents
an inversion which is part of a degenerative triadic subsequence in the original permutation. 
A degenerative triadic subsequence is defined as follows. Given exactly three values, a , b and c, in a permutation of 
size N, such that a > b > c, value a is to the left of value b in the permutation, 
and value b is to the left of value c in the permutation.


The number of heights, given a number of inversions, for a given ladder, is determined by the position of the bars.
The bars are determined by the inversions. If there is only 1 inversion then there is only 1 height created with
exactly 1 inversion created by exactly 2 elements. If the number of inversions is equal to 2, then the number of
elements responsible for these inversions is either 3 or 4. If the number is 3, then the number of heights required
is 2 since the bars have to be adjascent to each other in the ladder. If the number is 4, then only 2 
heights are reuired because the bars cannot be adjascent to each other. 





Key Point: The number of times a bar crosses a given route N is the same for every permutation of the degenerative case.
For example, given 4 degenerative permutations, 7654321, 654321, 54321, 4321, the bar [2 1] crosses the route 3 once, regardless 
of the permutation.


Given permutation 7654321
Number of ladders 24,698
Details of each bar: 


[6 5]: Crossed route 7 1628 times
[6 4]: Crossed route 7 1567 times 
[6 3]: Crossed route 7 1554 times 
[6 2]: Crossed route 7 1567 times 
[6 1]: Crossed route 7 1628 times 

[5 4]: Crossed route 7 1558 times
       Crossed route 6 85 times.
       Total number of times swapped 1643 

[5 3]: Crossed route 7 1625
        Crossed route 6 84 times
        Total number of times swapped 1709

[5 2]: Crossed route 7 1634 times
        Crossed route 6 84 times
        Total number of times swapped 1718

[5 1]: Crossed route 7 1567
        Crossed route 6 85 times 
        Total number of times swapped 1652

[4 3]: Crossed 7 1530
        Crossed 6 84
        Crossed 5 9
        Total number of times swapped 1623

[4 2]: Crossed 7 1625
       Crossed 6 87
       Crossed 5 9
       Total number of times swapped 1721

[4 1]: Crossed 7 1554
        Crossed 6: 84
        Crossed 5: 9
        Total: 1647

[3 2]: Crossed 7 - 1558
        Crossed 6 - 84
        Crossed 5 - 9
        Crossed 4 - 2
        Total - 1653

[3 1]   Crossed 7 - 1567
        Crossed 6 - 84
        Crossed 5 - 9
        Crossed 4 - 2
        Total - 1662

[2 1]:  Crossed 7 - 1628
        Crossed 6 - 85
        Crossed 5 - 9
        Crossed 4 - 2
        Crossed 3 - 1





Given permutation 654321
Number of ladders 908
Details of each bar: 


[5 4]: 
       Crossed route 6 85 times.
       Total number of times swapped 85 

[5 3]: 
        Crossed route 6 84 times
        Total number of times swapped 84

[5 2]: 
        Crossed route 6 84 times
        Total number of times swapped 84

[5 1]: 
        Crossed route 6 85 times 
        Total number of times swapped 85

[4 3]: 
        Crossed 6 84
        Crossed 5 9
        Total number of times swapped 93

[4 2]: 
       Crossed 6 87
       Crossed 5 9
       Total number of times swapped 96

[4 1]: 
        Crossed 6: 84
        Crossed 5: 9
        Total: 93

[3 2]: 
        Crossed 6 - 84
        Crossed 5 - 9
        Crossed 4 - 2
        Total - 95

[3 1]   
        Crossed 6 - 84
        Crossed 5 - 9
        Crossed 4 - 2
        Total - 95

[2 1]:  
        Crossed 6 - 85
        Crossed 5 - 9
        Crossed 4 - 2
        Crossed 3 - 1
        Total 97

Given 54321
Number of ladders 54321
Total number of ladders = 62
Details of each bar

[4 3] Route 5 - 9

[4 2] Route 5 - 9

[4 1] Route 5 - 9

[3 2] Route 4 - 2
      Route 5 - 9
      Total 11

[3 1] Route 4 - 2
        Route 5 - 9
        Total 11

[2 1]Route 3 - 1
        Route 4 - 2
        Route 5 - 9



Given 4321
Total 8 

[3 2] - Route 4 - 2

[3 1] Route 4 - 2

[2 1] Route 3 - 1
        Route 4 - 2


With the degenerative case, 2 bars share the same height in  the root ladder iff the sum of the values that create the bar sum 
to the same value. I.E. given permutation 54321 
[5 2] and [4 3]  share the same height, 
[4 2] and [5 1] share the same hieght and
[3 2] and [4 1] share the same height.

In the degenerative case,  the degenerative traidic subpatterns in the root
ladder are defined as follows. Given 3 elements of the permutation the combination
of the 3 choose 2 elements from the 3 elements must sum to N, N-1, N-2 where N is the top bar of the degenerative
triadic pattern, N-1 is the right bar of the degenerative triadic pattern and N-2 is the 
bottom bar (bar to be swapped) in the degenerative triadic pattern.



Given 4321 and 54321 it must be noted that the ladders in 4321 are all ancestors of ladders in 54321. 
They are ancestors of ladders in 54321 because they are basically the ancestor of every possible way
of each bar crossing route 5 in 54321 given their state in 4321. Basically ladder 1 in 4321 is a sub-ladder
of ladder 9 in 54321. Ladder 9 is ladder 1 plus all the possible ways that every bar can cross route 5 given
the permutation 54321 and the state of ladder 9 in 54321 which is defined as the state of ladder 1 in 4321.

The question then is, given that you know the state of the sub ladder, SL, of ladder L where the
sub-ladder is generated from  permutation 4321 and the ladder, L, is generated from 54321, can you then
determine how many ways to cross route 5 in ladder L. 

L1 of 4321 = L9 of 54321
L2 of 4321 = L16 54321
L3 of 4321 = L25 of 54321
L4 of 4321 = L32 of 54321
L5 of 4321 = L39 of 54321
L6 of 4321 = L48 of 54321
L7 of 4321 = L55 of 54321

*******************COUNTING PROBLEM*******************
When there is a strictly increasing substring followed by a stricyly decreasing substring such that the largest value of the decreasing 
substring is one less than the smallest value of the increasing substring, then do the following. Let B = the bar corresponding to the 
first two elements in the decreasing substring. The bar crosses  


Given permutation 43521 - total : 11 = 10 Swaps + root

[4 3] - 0 Not a bottom bar of a degenerative triadic subsequence
[4 2] - 0 Not a bottom bar of a degenerative triadic subsequence
[4 1] - 0 Not a bottom bar of a degenerative triadic subsequence

[3 2] - crosses 4 only: crosses route 4 two times. Once when [2 1] is below R3 and once when [2 1] is above R 4
[3 1] crosses 4 only: corsses 4 two times.

[2 1] - Crosses 5 three times. Once when neither [3 2] nor [3 1] has crossed R4, once when both [3 2] and [3 1]
        have crossed R4 and once when only [3 2] has crossed R4.
        - Crosses 4 two times. Once when [3 2] and [3 1] have both crossed R 4 and once when neither [3 2] nor [3 1]
        has crossed R 4.
        -Crosses R 3 one time.



If there are 2 degenerative subsequences such that the middle inversion of the each triadic seuqence is 
the same inversion, then what happens is the resulting bar has a left child and then a left grand child. Therefore, 
it is not always the case that the left child of a bar is the bottom bar of a degenerative triadic subsequence, 
it could be the grand child, great grand child, etc, of a middle bar of another degenerative triadic subsequence.

In the case of 6 2 4 1 3 5 we can see that [6 1] is the second bar of the degenerative triadic subsequence of 
 6 2 1 and 6 4 1. Therefore, the bottom bars [2 1] and [4 1] are in the left subtree starting from bar [6 1].
 However, the left child of [6 1] is [4 1] and the left child of [4 1] is [2 1] despite the fact that 
 4 2 1 is not a degeneratie traidic subsequence in the permutation. Therefore, the only logical reason [2 1] is 
 the left child of [4 1] is because [2 1] is the bottom inversion of 6 2 1, but 4 1 is the bottom inversion of
6 4 1. Since the bar [6 1] has two bottom bars associated with it, [4 1] will be the child and [2 1] will be the 
grandchild.



###  Number of DTS's ###
Given pi = degen(N)
The number of DTS's is:
N^3 - 3N^2 + 2N/6



What exactly is a ladder lottery and why do permutations without decreasing subsequences of length 3 have 
only one ladder lottery?        
        A ladder lottery is a heirarchy of parallelized  of adjascent transpositions of inversions where the maximal number of
        inversions that can be uninverted by an adjascent transposition at a given level of the heirarchy become uninverted. 
        Basically it means perform the maximal number of adjascent transpositions on inversions as possible in parallel, and then 
        continue doing so until the permutation is sorted.

        within a permutation such that the permutation is sorted after all the adjascent transpositions of 
        inversions have been completed. 

        The reason permutations withoyt DSS only have one ladder lottery is because there is only one way to perform  parallelized 
        adjascent transpositions on inversions. Meaning there is only one way to perform parallel adjascent transpositions on the inversions
        in the permutation.

        When a ladder has a DSSs3 then there is a common element shared between two overlapping adjascent inversions. This presents two choices
        as to which adjascent inversion can be uninvert first. The two adjascent transpositions cannot be uninverted in parallel because
        uninverting the one inversion makes the elements of second inversion no longer adjascent, seeing as the shared element of the second inversion
        got misplaced when the first adjascent inversion was uninverted. 
        However, permutations with DSS3s have more than one heirarchy of parallelized adjascent transpositions on inversions because 
        either the smallest of the three  inversions can be transposed before the largest, or the largest can be transposed before the 
        smallest, but neither can be transposed at the same time because they share an element. I.e. if  A B form an inversion and B C form and inversion
        and A > B > C then elemeny B is adjascent to both A and B in the original permutation, resulting in two 
        overlapping inversions in the original permutation. and at the same time there 
        are two adjascent transpositions formed with B, thus if uninverting transposition B C then A C cannot be uninverted at the same time
        since A and B are no longer adjascent in the OG perm, yet they still form an inversion in og PI 
        and vice versa, thus there is a choice as to whether to choose to uninvert the larger of the two inversions 
        formed with B or the smaller of the two inversions that is formed with B. Therefore there are two ladder lotteries for this.



Cases for DSS3s:
        If there are two DSS3s such that 


Minimum Height Problem:

The upper bound for the minimum height = N. 
This is because the reverse ladder has the max 
number of bars with the highest column density of bars. 
Column Density is defined as a relation between two bars such that the 
closer they are in terms of their columns the denser they are. 1 indicates the
highest density, as in 1 column apart. For every two bars with a column density of 
1, a new row is required. A column density of 0 or 2 ... N-2 means the two bars 
do not require a new row. But if there is a column density of 0 between two bars, x and y, 
then there is a third bar z with a column density of 1 in relation to both x and y. 
        Proof: Pretty simple, suppose two bars were in the same column, had a column density of 
        0 and they did not require seperate rows. Then the two bars would be in the same row and 
        column, thus resulting in the bars overlapping each other. Which is not allowed. 

The lowest density between any two bars = n-2. The greater the 
column density of a ladder, the more rows are required. Counting column density:
The overall column density equals the sum of the column densities. The higher 
the number the higher the overall density. Proof: Let the column density between 
two bars be = to N-2. If these are the only two bars in the ladder, then we are finished. 
Now suppose this one of the bars that compose this column density has been removed and the next 
largest column density is N-3. If that is the case, then a bar has been added to either the second last 
column or the second column. If the bar has been added to 
The reverse ladder 
has the highest overall density because each bar represents an inversion, the 
inversion set is maximal for reverse L N. The uninversin set is 0.
For each uninversion, a bar is removed from the inversion set of reverse L N, thus 
reducing the overall column density. 


** Let  element i be an element that forms inversions in pi, let element i+1 also form inversions in pi, let 1 < i < N and i left of element i+1 in pi, 
let dir be the direction of the route of the element in the ladder. 
If the direction of element i and i+1 start by going right to left and do not change direction, then one more row needs to be added to the ladder 
for the last bar of element i. Why? The last bar of element i+1's route appears in column i and some arbitrary row r, and 
the second last bar of element i+1s 
route appears in column i-1 and some arbitrary row r-1. The last bar of element i needs to go into column i-1, but it cannot go 
to row r-1 because the second last bar of element i+1 is there and it cannot go to row r because the last bar of element i+1 
is at said row. Therefore a new row needs to be added to the ladder to compensate of the last bar of element i.  
If element N is directly to the left of element N-1 then the min height is at least pos(N) inIdendity - Posn(N) in pi + 1.  
e.g. the ladder for 3457621 has at least a min height of 7 - 4 = 3, 3 +1 = 4.


#Min ladder algorithm
##case 1: route of N cannot be right swapped. Add bars of route N to the position they would be in the root ladder
##case 2: route of N can be right swapped. case 2A: If right swapping does not add a new row to the ladder then right swap route N 
and place it above route N+1. case 2B: If right swapping route N does add a new row to the ladder and not right swapping route N 
does not add a new row to the ladder then place route N in the position it would go in the root ladder. case 2C: If right swapping route 
N does add a new row to the ladder and leaving route N in the position it would go in the route ladder both add a new row to the ladder 
then right swap route N.


Min Height algorithm****

Let pi(0) = 7634521

L0 = 
| | | | | | |
| | | | | | |
| | | | | | |
| | | | | | |
| | | | | | |

Perform the maximum number of adjacent transpositions on pi(0) such that the intersection of all adjacent transpositions is the empty set.
Add the bars to the ladder for each adj transposition in the column = to the greater element of the adjacent transposition. Go from left to 
right in the permutation. 

pi(1) = 6,7,3,4,2,5,1

Add the bars [7,3][4,2][5,1] to the ladder at row 0 columns 1, 3, 5 respectively.

pi(2) 6,3,7,2,4,1,5 
Add the bars [6,3][7,2][4,1] to row 1 and columns 0,2,4 respectively 

pi(3) 3,6,2,7,1,4,5 
Add the bars [6,2][7,1] to row 2 and columns 1,3 respectively

pi(4) 3,2,6,1,7,4,5 
Add the bars [3,2][6,1][7,4] to row 3 and columns 0,2,4 respectively

pi(5) 2,3,1,6,4,7,5
Add the bars [3,1][6,4][7,5] to row 4 and columns 1,3,5 respectively 

pi(6) 2,1,3,4,6,5,7
Add the bars [2,1],[6,5] to row 5 and columns 0,4 respectively.

pi(7) 1,2,3,4,5,6,7
No more bars to add, ladder complete.


****** The way to figure out this problem is to find all the DSS3s in the first perm.
Then you need to figure out the bars in each DSS3 to add such that 
it maximizes the number of bars that can be added in the second 
iteration and the max number of bars are added on the first iteration.  

Once a bar for a route has been added, do not add a bar 
that will stop the route from progressing. This means once you swap 
an element, keep swapping it until it is in its spot. 
 
For example: Given 8 7 4 6 5 1 3 2

P[0] = 8 7 4 6 5 1 3 2
        [8,7], [5,1], [3,2]
P[1] = 7 8 4 6 1 5 2 3
        [8,4], [6,1], [5,2]
P[2] = 7 4 8 1 6 2 5 3
        [8,1], [6,2], [5,3]
P[3] = 4 7 1 8 2 6 3 5
        [7,1], [8,2], [6,3]
P[4] = 4 1 7 2 8 3 6 5
        [4,1], [7,2], [8,3],[6,5]
P[5] = 1 4 2 7 3 8 5 6
        [4,2], [7,3], [8,5]
P[6] = 1 2 4 3 7 5 8 6
        [4,3], [7,5], [8,6]
P[7] = 1 2 3 4 5 7 6 8
        [7,6]
P[8] = 1 2 3 4 5 6 7 8
You can start by swapping [8,7], [5,1], [3,2], but you could not start by swapping 
 [8,7], [6,5], [3,2]. Why? Because swapping the 6,5 does not create an adj inversion 
 in the second level since the 4 is directly to the left of 5. But swapping the 
 5,1 does create an  inversion on the next level because the 5 creates an inversion with 
 the value to the left of 1 which is three. This maximizes the number of adj inversions 
 on the next level. Once this is done, do not swap an adj perm 
 if it prevents the element of the adj trans from the prev level to not be swapped.